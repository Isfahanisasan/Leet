"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_src_components_Editor_js",{

/***/ "(app-pages-browser)/./src/components/AItextWrapper.js":
/*!*****************************************!*\
  !*** ./src/components/AItextWrapper.js ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _alkhipce_editorjs_aitext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @alkhipce/editorjs-aitext */ \"(app-pages-browser)/./node_modules/@alkhipce/editorjs-aitext/dist/aitext.mjs\");\n\n\nclass CustomAITextWrapper extends _alkhipce_editorjs_aitext__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    // onKeyUp(e) {\n    //     if (this._element && this._element.querySelector('#ai-suggestions')) {\n    //         // focus on the suggestion and not the input query \n    //         if (e.code === 'Escape'){\n    //             this._element.querySelector('#ai-suggestions').remove();\n    //         }\n    //     }\n    // }\n    drawView() {\n        const elem = super.drawView();\n        elem.id = \"ai-text-element\"; // Add an id to the elem for easy selection\n        // Create a query button\n        let queryButton = document.createElement(\"button\");\n        queryButton.innerText = \"Query AI\";\n        // queryButton.style.position = 'absolute';\n        // queryButton.style.top = '10px';\n        // queryButton.style.right = '10px';\n        // queryButton.style.border = '1px solid black';\n        // queryButton.style.backgroundColor = 'blue';\n        // queryButton.style.padding = '5px';\n        // queryButton.style.zIndex = '1000'; // Ensure it stays on top\n        elem.style.position = \"relative\"; // Ensure the parent element is positioned relatively\n        queryButton.style = \"\\n            width: 80px; \\n            height: 40px; \\n            border-radius: 20px; \\n            background-color: #007bff; \\n            color: white; \\n            border: none; \\n            cursor: pointer; \\n            box-sizing: border-box; \\n            margin-top: 10px;\\n            margin-right: 10px;\\n            margin-left: 10px;\\n            margin-bottom: 10px;\\n            top: 10px; \\n            right: 10px;\\n        \";\n        //     queryButton.style = `\n        //     position: absolute; \n        //     top: 10px; \n        //     right: 10px; \n        //     width: 80px; \n        //     height: 40px; \n        //     border-radius: 20px; \n        //     background-color: #007bff; \n        //     color: white; \n        //     border: none; \n        //     cursor: pointer; \n        //     box-sizing: border-box;\n        // `;\n        queryButton.tabIndex = -1;\n        queryButton.addEventListener(\"click\", (e)=>{\n            const text = document.getElementById(\"ai-text-element\").innerText;\n            this.getAICompletion(text);\n            // focus on the suggestion and not the input query\n            if (this._element.querySelector(\"#ai-suggestions\")) {\n                this._element.querySelector(\"#ai-suggestions\").focus();\n            }\n        });\n        // insert the button into the element \n        this.queryAIButton = queryButton;\n        const parentElem = document.createElement(\"div\");\n        parentElem.appendChild(queryButton);\n        parentElem.appendChild(elem);\n        // parentElem.appendChild(queryInput);\n        // parentElem.style.display = 'flex';\n        parentElem.style.flexDirection = \"column\"; // Stack elements vertically\n        parentElem.style.alignItems = \"flex-start\"; // Align items to the start\n        // parentElem.style.padding = '10px'; // Add some padding        \n        console.log(parentElem);\n        return parentElem;\n    }\n    getAICompletion(content) {\n        var // this._element?.querySelector('button').remove();\n        // this._element?.appendChild(loaderElement)\n        _this_callback, _this;\n        if (!content) return;\n        const loaderElement = document.createElement(\"div\");\n        loaderElement.innerHTML = '<svg width=\"800px\" height=\"800px\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\\n        <path d=\"M12 2.99988V5.99988M12 20.9999V17.9999M4.20577 16.4999L6.80385 14.9999M21 11.9999H18M16.5 19.7941L15 17.196M3 11.9999H6M7.5 4.20565L9 6.80373M7.5 19.7941L9 17.196M19.7942 16.4999L17.1962 14.9999M4.20577 7.49988L6.80385 8.99988\" stroke=\"#000000\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\\n        </svg>';\n        loaderElement.id = \"ai-suggestions-loader\";\n        loaderElement.style.display = \"inline-flex\";\n        loaderElement.style.alignItems = \"center\";\n        loaderElement.style.width = \"24px\";\n        loaderElement.style.height = \"24px\";\n        loaderElement.style.paddingLeft = \"4px\";\n        loaderElement.style.color = \"gray\";\n        // loaderElement.style.position = 'absolute'\n        // I want the loader to have its own space \n        // loaderElement.style.position = 'relative'; // Ensure it is positioned relative to its container\n        // loaderElement.style.marginLeft = '10px'; // Add margin to the left to create space\n        // loaderElement.style.marginRight = '10px'; // Add margin to the right to create space\n        // loaderElement.style.display = 'inline-block'; // Ensure it is treated as an inline-block element\n        loaderElement.animate([\n            {\n                transform: \"rotate(0deg)\"\n            },\n            {\n                transform: \"rotate(360deg)\"\n            }\n        ], {\n            duration: 2000,\n            iterations: Infinity\n        });\n        // replace the query button with the loader\n        this.queryAIButton.replaceWith(loaderElement);\n        (_this_callback = (_this = this).callback) === null || _this_callback === void 0 ? void 0 : _this_callback.call(_this, content).then((response)=>{\n            var _this__element, _this__element_querySelector, _this__element1, _this__element2, _this__element3;\n            const aiSuggestions = document.createElement(\"span\");\n            aiSuggestions.innerHTML = \"\";\n            aiSuggestions.id = \"ai-suggestions\";\n            aiSuggestions.style.color = \"lightgray\";\n            aiSuggestions.innerHTML = response;\n            (_this__element = this._element) === null || _this__element === void 0 ? void 0 : _this__element.appendChild(aiSuggestions);\n            (_this__element1 = this._element) === null || _this__element1 === void 0 ? void 0 : (_this__element_querySelector = _this__element1.querySelector(\"#ai-suggestions-loader\")) === null || _this__element_querySelector === void 0 ? void 0 : _this__element_querySelector.remove();\n            //remove the query AI button \n            // this._element?.querySelector('button').remove();\n            // add a button to accept and modify the text\n            const acceptButton = document.createElement(\"button\");\n            acceptButton.innerText = \"Accept\";\n            acceptButton.style = \"\\n                width: 80px; \\n                height: 40px; \\n                border-radius: 20px; \\n                background-color: #007bff; \\n                color: white; \\n                border: none; \\n                cursor: pointer; \\n                box-sizing: border-box; \\n                margin-top: 10px;\\n                margin-right: 10px;\\n                margin-left: 10px;\\n                margin-bottom: 10px;\\n                top: 10px; \\n                right: 10px;\\n                display: block;\\n            \";\n            // add a button decline that opens up a new Ai text block \n            const declineButton = document.createElement(\"button\");\n            declineButton.innerText = \"Decline\";\n            declineButton.style = \"\\n                width: 80px; \\n                height: 40px; \\n                border-radius: 20px; \\n                background-color: #007bff; \\n                color: white; \\n                border: none; \\n                cursor: pointer; \\n                box-sizing: border-box; \\n                margin-top: 10px;\\n                margin-right: 10px;\\n                margin-left: 10px;\\n                margin-bottom: 10px;\\n                top: 10px; \\n                right: 10px;\\n                display: block;\\n            \";\n            // when accept button is clicked, replace the text with the AI generated text\n            acceptButton.addEventListener(\"click\", ()=>{\n                var _this__element;\n                const aiSuggestionElement = (_this__element = this._element) === null || _this__element === void 0 ? void 0 : _this__element.querySelector(\"#ai-suggestions\");\n                const aiSuggestion = aiSuggestionElement === null || aiSuggestionElement === void 0 ? void 0 : aiSuggestionElement.innerText;\n                if (!aiSuggestion) return;\n                // const aiSuggestionTextNode = document.createTextNode(aiSuggestion);\n                // this._element?.replaceChild(aiSuggestionTextNode, aiSuggestionElement);\n                // // also remove the query and accept button \n                // acceptButton.remove();\n                // // remove the decline button too \n                // declineButton.remove();\n                // this._element?.querySelector('.ce-paragraph').remove();\n                // return;\n                // remove the ai text block and eplace it with a paragraph populated with the AI suggestion\n                const currentBlockIndex = this.api.blocks.getCurrentBlockIndex();\n                this.api.blocks.delete(currentBlockIndex);\n                this.api.blocks.insert(\"paragraph\", {\n                    text: aiSuggestion\n                }, null, currentBlockIndex);\n            });\n            declineButton.addEventListener(\"click\", ()=>{\n                var // remove the suggestion from ai \n                _this__element, // add queryai button before .ce-paragraph\n                _this__element1, // focus on the .ce-paragraph to continue typing a query \n                _this__element2;\n                (_this__element = this._element) === null || _this__element === void 0 ? void 0 : _this__element.querySelector(\"#ai-suggestions\").remove();\n                // remove the accept and decline buttons\n                acceptButton.remove();\n                declineButton.remove();\n                (_this__element1 = this._element) === null || _this__element1 === void 0 ? void 0 : _this__element1.insertBefore(this.queryAIButton, this._element.querySelector(\".ce-paragraph\"));\n                (_this__element2 = this._element) === null || _this__element2 === void 0 ? void 0 : _this__element2.querySelector(\".ce-paragraph\").focus();\n            });\n            (_this__element2 = this._element) === null || _this__element2 === void 0 ? void 0 : _this__element2.appendChild(acceptButton);\n            (_this__element3 = this._element) === null || _this__element3 === void 0 ? void 0 : _this__element3.appendChild(declineButton);\n        }).catch((error)=>{\n            throw new Error(error);\n        });\n    }\n    constructor({ api, block, config, data }){\n        super({\n            api,\n            block,\n            config,\n            data\n        });\n        this.queryAIButton = null;\n        this.onInput = (e)=>{\n            var _this__element;\n            if (((_this__element = this._element) === null || _this__element === void 0 ? void 0 : _this__element.querySelector(\"#ai-suggestions\")) || e.inputType === \"deleteContentBackward\" || e.inputType === \"deleteContentForward\" || e.inputType === \"insertParagraph\" || e.inputType === \"insertFromPaste\" || e.inputType === \"insertFromDrop\" || !e.target.innerHTML) {\n                return;\n            }\n        // this.getAIComp[letion(e.target.innerHTML)\n        };\n    }\n}\n;\n/* harmony default export */ __webpack_exports__[\"default\"] = (CustomAITextWrapper);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/AItextWrapper.js\n"));

/***/ })

});